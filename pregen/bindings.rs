/* automatically generated by rust-bindgen */

pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_object {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_message {
    pub name: *const ::std::os::raw::c_char,
    pub signature: *const ::std::os::raw::c_char,
    pub types: *mut *const wl_interface,
}
#[test]
fn bindgen_test_layout_wl_message() {
    assert_eq!(
        ::std::mem::size_of::<wl_message>(),
        24usize,
        concat!("Size of: ", stringify!(wl_message))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_message>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_message))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_message>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_message),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_message>())).signature as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_message),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_message>())).types as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_message),
            "::",
            stringify!(types)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_interface {
    pub name: *const ::std::os::raw::c_char,
    pub version: ::std::os::raw::c_int,
    pub method_count: ::std::os::raw::c_int,
    pub methods: *const wl_message,
    pub event_count: ::std::os::raw::c_int,
    pub events: *const wl_message,
}
#[test]
fn bindgen_test_layout_wl_interface() {
    assert_eq!(
        ::std::mem::size_of::<wl_interface>(),
        40usize,
        concat!("Size of: ", stringify!(wl_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_interface))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_interface>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_interface),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_interface>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_interface),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_interface>())).method_count as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_interface),
            "::",
            stringify!(method_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_interface>())).methods as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_interface),
            "::",
            stringify!(methods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_interface>())).event_count as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_interface),
            "::",
            stringify!(event_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_interface>())).events as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_interface),
            "::",
            stringify!(events)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}
#[test]
fn bindgen_test_layout_wl_list() {
    assert_eq!(
        ::std::mem::size_of::<wl_list>(),
        16usize,
        concat!("Size of: ", stringify!(wl_list))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_list>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_list>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_list),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_list>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_list),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub fn wl_list_init(list: *mut wl_list);
}
extern "C" {
    pub fn wl_list_insert(list: *mut wl_list, elm: *mut wl_list);
}
extern "C" {
    pub fn wl_list_remove(elm: *mut wl_list);
}
extern "C" {
    pub fn wl_list_length(list: *const wl_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_list_empty(list: *const wl_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_list_insert_list(list: *mut wl_list, other: *mut wl_list);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_array {
    pub size: usize,
    pub alloc: usize,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wl_array() {
    assert_eq!(
        ::std::mem::size_of::<wl_array>(),
        24usize,
        concat!("Size of: ", stringify!(wl_array))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_array>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_array>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_array),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_array>())).alloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_array),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_array>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_array),
            "::",
            stringify!(data)
        )
    );
}
extern "C" {
    pub fn wl_array_init(array: *mut wl_array);
}
extern "C" {
    pub fn wl_array_release(array: *mut wl_array);
}
extern "C" {
    pub fn wl_array_add(array: *mut wl_array, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_array_copy(array: *mut wl_array, source: *mut wl_array) -> ::std::os::raw::c_int;
}
pub type wl_fixed_t = i32;
extern "C" {
    pub fn wl_fixed_to_double(f: wl_fixed_t) -> f64;
}
extern "C" {
    pub fn wl_fixed_from_double(d: f64) -> wl_fixed_t;
}
extern "C" {
    pub fn wl_fixed_to_int(f: wl_fixed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_fixed_from_int(i: ::std::os::raw::c_int) -> wl_fixed_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wl_argument {
    pub i: i32,
    pub u: u32,
    pub f: wl_fixed_t,
    pub s: *const ::std::os::raw::c_char,
    pub o: *mut wl_object,
    pub n: u32,
    pub a: *mut wl_array,
    pub h: i32,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_wl_argument() {
    assert_eq!(
        ::std::mem::size_of::<wl_argument>(),
        8usize,
        concat!("Size of: ", stringify!(wl_argument))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_argument>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_argument))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_argument>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_argument),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_argument>())).u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_argument),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_argument>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_argument),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_argument>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_argument),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_argument>())).o as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_argument),
            "::",
            stringify!(o)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_argument>())).n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_argument),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_argument>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_argument),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_argument>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_argument),
            "::",
            stringify!(h)
        )
    );
}
pub type wl_dispatcher_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: u32,
        arg4: *const wl_message,
        arg5: *mut wl_argument,
    ) -> ::std::os::raw::c_int,
>;
pub type wl_log_func_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, arg2: *mut __va_list_tag),
>;
pub const wl_iterator_result_WL_ITERATOR_STOP: wl_iterator_result = 0;
pub const wl_iterator_result_WL_ITERATOR_CONTINUE: wl_iterator_result = 1;
pub type wl_iterator_result = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_proxy {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_display {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_event_queue {
    _unused: [u8; 0],
}
extern "C" {
    pub fn wl_event_queue_destroy(queue: *mut wl_event_queue);
}
extern "C" {
    pub fn wl_proxy_marshal(p: *mut wl_proxy, opcode: u32, ...);
}
extern "C" {
    pub fn wl_proxy_marshal_array(p: *mut wl_proxy, opcode: u32, args: *mut wl_argument);
}
extern "C" {
    pub fn wl_proxy_create(factory: *mut wl_proxy, interface: *const wl_interface)
        -> *mut wl_proxy;
}
extern "C" {
    pub fn wl_proxy_create_wrapper(
        proxy: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_proxy_wrapper_destroy(proxy_wrapper: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wl_proxy_marshal_constructor(
        proxy: *mut wl_proxy,
        opcode: u32,
        interface: *const wl_interface,
        ...
    ) -> *mut wl_proxy;
}
extern "C" {
    pub fn wl_proxy_marshal_constructor_versioned(
        proxy: *mut wl_proxy,
        opcode: u32,
        interface: *const wl_interface,
        version: u32,
        ...
    ) -> *mut wl_proxy;
}
extern "C" {
    pub fn wl_proxy_marshal_array_constructor(
        proxy: *mut wl_proxy,
        opcode: u32,
        args: *mut wl_argument,
        interface: *const wl_interface,
    ) -> *mut wl_proxy;
}
extern "C" {
    pub fn wl_proxy_marshal_array_constructor_versioned(
        proxy: *mut wl_proxy,
        opcode: u32,
        args: *mut wl_argument,
        interface: *const wl_interface,
        version: u32,
    ) -> *mut wl_proxy;
}
extern "C" {
    pub fn wl_proxy_destroy(proxy: *mut wl_proxy);
}
extern "C" {
    pub fn wl_proxy_add_listener(
        proxy: *mut wl_proxy,
        implementation: *mut ::std::option::Option<unsafe extern "C" fn()>,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_proxy_get_listener(proxy: *mut wl_proxy) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_proxy_add_dispatcher(
        proxy: *mut wl_proxy,
        dispatcher_func: wl_dispatcher_func_t,
        dispatcher_data: *const ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_proxy_set_user_data(proxy: *mut wl_proxy, user_data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wl_proxy_get_user_data(proxy: *mut wl_proxy) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_proxy_get_version(proxy: *mut wl_proxy) -> u32;
}
extern "C" {
    pub fn wl_proxy_get_id(proxy: *mut wl_proxy) -> u32;
}
extern "C" {
    pub fn wl_proxy_get_class(proxy: *mut wl_proxy) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wl_proxy_set_queue(proxy: *mut wl_proxy, queue: *mut wl_event_queue);
}
extern "C" {
    pub fn wl_display_connect(name: *const ::std::os::raw::c_char) -> *mut wl_display;
}
extern "C" {
    pub fn wl_display_connect_to_fd(fd: ::std::os::raw::c_int) -> *mut wl_display;
}
extern "C" {
    pub fn wl_display_disconnect(display: *mut wl_display);
}
extern "C" {
    pub fn wl_display_get_fd(display: *mut wl_display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_display_dispatch(display: *mut wl_display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_display_dispatch_queue(
        display: *mut wl_display,
        queue: *mut wl_event_queue,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_display_dispatch_queue_pending(
        display: *mut wl_display,
        queue: *mut wl_event_queue,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_display_dispatch_pending(display: *mut wl_display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_display_get_error(display: *mut wl_display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_display_get_protocol_error(
        display: *mut wl_display,
        interface: *mut *const wl_interface,
        id: *mut u32,
    ) -> u32;
}
extern "C" {
    pub fn wl_display_flush(display: *mut wl_display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_display_roundtrip_queue(
        display: *mut wl_display,
        queue: *mut wl_event_queue,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_display_roundtrip(display: *mut wl_display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_display_create_queue(display: *mut wl_display) -> *mut wl_event_queue;
}
extern "C" {
    pub fn wl_display_prepare_read_queue(
        display: *mut wl_display,
        queue: *mut wl_event_queue,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_display_prepare_read(display: *mut wl_display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_display_cancel_read(display: *mut wl_display);
}
extern "C" {
    pub fn wl_display_read_events(display: *mut wl_display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_log_set_handler_client(handler: wl_log_func_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_buffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_callback {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_compositor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_data_device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_data_device_manager {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_data_offer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_data_source {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_keyboard {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_output {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_pointer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_region {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_registry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_seat {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_shell {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_shell_surface {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_shm {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_shm_pool {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_subcompositor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_subsurface {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_surface {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_touch {
    _unused: [u8; 0],
}
extern "C" {
    pub static wl_display_interface: wl_interface;
}
extern "C" {
    pub static wl_registry_interface: wl_interface;
}
extern "C" {
    pub static wl_callback_interface: wl_interface;
}
extern "C" {
    pub static wl_compositor_interface: wl_interface;
}
extern "C" {
    pub static wl_shm_pool_interface: wl_interface;
}
extern "C" {
    pub static wl_shm_interface: wl_interface;
}
extern "C" {
    pub static wl_buffer_interface: wl_interface;
}
extern "C" {
    pub static wl_data_offer_interface: wl_interface;
}
extern "C" {
    pub static wl_data_source_interface: wl_interface;
}
extern "C" {
    pub static wl_data_device_interface: wl_interface;
}
extern "C" {
    pub static wl_data_device_manager_interface: wl_interface;
}
extern "C" {
    pub static wl_shell_interface: wl_interface;
}
extern "C" {
    pub static wl_shell_surface_interface: wl_interface;
}
extern "C" {
    pub static wl_surface_interface: wl_interface;
}
extern "C" {
    pub static wl_seat_interface: wl_interface;
}
extern "C" {
    pub static wl_pointer_interface: wl_interface;
}
extern "C" {
    pub static wl_keyboard_interface: wl_interface;
}
extern "C" {
    pub static wl_touch_interface: wl_interface;
}
extern "C" {
    pub static wl_output_interface: wl_interface;
}
extern "C" {
    pub static wl_region_interface: wl_interface;
}
extern "C" {
    pub static wl_subcompositor_interface: wl_interface;
}
extern "C" {
    pub static wl_subsurface_interface: wl_interface;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_display_error {
    WL_DISPLAY_ERROR_INVALID_OBJECT = 0,
    WL_DISPLAY_ERROR_INVALID_METHOD = 1,
    WL_DISPLAY_ERROR_NO_MEMORY = 2,
    WL_DISPLAY_ERROR_IMPLEMENTATION = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_display_listener {
    pub error: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_display: *mut wl_display,
            object_id: *mut ::std::os::raw::c_void,
            code: u32,
            message: *const ::std::os::raw::c_char,
        ),
    >,
    pub delete_id: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_display: *mut wl_display,
            id: u32,
        ),
    >,
}
#[test]
fn bindgen_test_layout_wl_display_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_display_listener>(),
        16usize,
        concat!("Size of: ", stringify!(wl_display_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_display_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_display_listener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_display_listener>())).error as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_display_listener),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_display_listener>())).delete_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_display_listener),
            "::",
            stringify!(delete_id)
        )
    );
}
extern "C" {
    pub fn wl_display_add_listener(
        wl_display: *mut wl_display,
        listener: *const wl_display_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_display_set_user_data(
        wl_display: *mut wl_display,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_display_get_user_data(wl_display: *mut wl_display) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_display_get_version(wl_display: *mut wl_display) -> u32;
}
extern "C" {
    pub fn wl_display_sync(wl_display: *mut wl_display) -> *mut wl_callback;
}
extern "C" {
    pub fn wl_display_get_registry(wl_display: *mut wl_display) -> *mut wl_registry;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_registry_listener {
    pub global: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_registry: *mut wl_registry,
            name: u32,
            interface: *const ::std::os::raw::c_char,
            version: u32,
        ),
    >,
    pub global_remove: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_registry: *mut wl_registry,
            name: u32,
        ),
    >,
}
#[test]
fn bindgen_test_layout_wl_registry_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_registry_listener>(),
        16usize,
        concat!("Size of: ", stringify!(wl_registry_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_registry_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_registry_listener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_registry_listener>())).global as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_registry_listener),
            "::",
            stringify!(global)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wl_registry_listener>())).global_remove as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_registry_listener),
            "::",
            stringify!(global_remove)
        )
    );
}
extern "C" {
    pub fn wl_registry_add_listener(
        wl_registry: *mut wl_registry,
        listener: *const wl_registry_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_registry_set_user_data(
        wl_registry: *mut wl_registry,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_registry_get_user_data(wl_registry: *mut wl_registry) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_registry_get_version(wl_registry: *mut wl_registry) -> u32;
}
extern "C" {
    pub fn wl_registry_destroy(wl_registry: *mut wl_registry);
}
extern "C" {
    pub fn wl_registry_bind(
        wl_registry: *mut wl_registry,
        name: u32,
        interface: *const wl_interface,
        version: u32,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_callback_listener {
    pub done: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_callback: *mut wl_callback,
            callback_data: u32,
        ),
    >,
}
#[test]
fn bindgen_test_layout_wl_callback_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_callback_listener>(),
        8usize,
        concat!("Size of: ", stringify!(wl_callback_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_callback_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_callback_listener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_callback_listener>())).done as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_callback_listener),
            "::",
            stringify!(done)
        )
    );
}
extern "C" {
    pub fn wl_callback_add_listener(
        wl_callback: *mut wl_callback,
        listener: *const wl_callback_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_callback_set_user_data(
        wl_callback: *mut wl_callback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_callback_get_user_data(wl_callback: *mut wl_callback) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_callback_get_version(wl_callback: *mut wl_callback) -> u32;
}
extern "C" {
    pub fn wl_callback_destroy(wl_callback: *mut wl_callback);
}
extern "C" {
    pub fn wl_compositor_set_user_data(
        wl_compositor: *mut wl_compositor,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_compositor_get_user_data(
        wl_compositor: *mut wl_compositor,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_compositor_get_version(wl_compositor: *mut wl_compositor) -> u32;
}
extern "C" {
    pub fn wl_compositor_destroy(wl_compositor: *mut wl_compositor);
}
extern "C" {
    pub fn wl_compositor_create_surface(wl_compositor: *mut wl_compositor) -> *mut wl_surface;
}
extern "C" {
    pub fn wl_compositor_create_region(wl_compositor: *mut wl_compositor) -> *mut wl_region;
}
extern "C" {
    pub fn wl_shm_pool_set_user_data(
        wl_shm_pool: *mut wl_shm_pool,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_shm_pool_get_user_data(wl_shm_pool: *mut wl_shm_pool) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_shm_pool_get_version(wl_shm_pool: *mut wl_shm_pool) -> u32;
}
extern "C" {
    pub fn wl_shm_pool_create_buffer(
        wl_shm_pool: *mut wl_shm_pool,
        offset: i32,
        width: i32,
        height: i32,
        stride: i32,
        format: u32,
    ) -> *mut wl_buffer;
}
extern "C" {
    pub fn wl_shm_pool_destroy(wl_shm_pool: *mut wl_shm_pool);
}
extern "C" {
    pub fn wl_shm_pool_resize(wl_shm_pool: *mut wl_shm_pool, size: i32);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_shm_error {
    WL_SHM_ERROR_INVALID_FORMAT = 0,
    WL_SHM_ERROR_INVALID_STRIDE = 1,
    WL_SHM_ERROR_INVALID_FD = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_shm_format {
    WL_SHM_FORMAT_ARGB8888 = 0,
    WL_SHM_FORMAT_XRGB8888 = 1,
    WL_SHM_FORMAT_C8 = 538982467,
    WL_SHM_FORMAT_RGB332 = 943867730,
    WL_SHM_FORMAT_BGR233 = 944916290,
    WL_SHM_FORMAT_XRGB4444 = 842093144,
    WL_SHM_FORMAT_XBGR4444 = 842089048,
    WL_SHM_FORMAT_RGBX4444 = 842094674,
    WL_SHM_FORMAT_BGRX4444 = 842094658,
    WL_SHM_FORMAT_ARGB4444 = 842093121,
    WL_SHM_FORMAT_ABGR4444 = 842089025,
    WL_SHM_FORMAT_RGBA4444 = 842088786,
    WL_SHM_FORMAT_BGRA4444 = 842088770,
    WL_SHM_FORMAT_XRGB1555 = 892424792,
    WL_SHM_FORMAT_XBGR1555 = 892420696,
    WL_SHM_FORMAT_RGBX5551 = 892426322,
    WL_SHM_FORMAT_BGRX5551 = 892426306,
    WL_SHM_FORMAT_ARGB1555 = 892424769,
    WL_SHM_FORMAT_ABGR1555 = 892420673,
    WL_SHM_FORMAT_RGBA5551 = 892420434,
    WL_SHM_FORMAT_BGRA5551 = 892420418,
    WL_SHM_FORMAT_RGB565 = 909199186,
    WL_SHM_FORMAT_BGR565 = 909199170,
    WL_SHM_FORMAT_RGB888 = 875710290,
    WL_SHM_FORMAT_BGR888 = 875710274,
    WL_SHM_FORMAT_XBGR8888 = 875709016,
    WL_SHM_FORMAT_RGBX8888 = 875714642,
    WL_SHM_FORMAT_BGRX8888 = 875714626,
    WL_SHM_FORMAT_ABGR8888 = 875708993,
    WL_SHM_FORMAT_RGBA8888 = 875708754,
    WL_SHM_FORMAT_BGRA8888 = 875708738,
    WL_SHM_FORMAT_XRGB2101010 = 808669784,
    WL_SHM_FORMAT_XBGR2101010 = 808665688,
    WL_SHM_FORMAT_RGBX1010102 = 808671314,
    WL_SHM_FORMAT_BGRX1010102 = 808671298,
    WL_SHM_FORMAT_ARGB2101010 = 808669761,
    WL_SHM_FORMAT_ABGR2101010 = 808665665,
    WL_SHM_FORMAT_RGBA1010102 = 808665426,
    WL_SHM_FORMAT_BGRA1010102 = 808665410,
    WL_SHM_FORMAT_YUYV = 1448695129,
    WL_SHM_FORMAT_YVYU = 1431918169,
    WL_SHM_FORMAT_UYVY = 1498831189,
    WL_SHM_FORMAT_VYUY = 1498765654,
    WL_SHM_FORMAT_AYUV = 1448433985,
    WL_SHM_FORMAT_NV12 = 842094158,
    WL_SHM_FORMAT_NV21 = 825382478,
    WL_SHM_FORMAT_NV16 = 909203022,
    WL_SHM_FORMAT_NV61 = 825644622,
    WL_SHM_FORMAT_YUV410 = 961959257,
    WL_SHM_FORMAT_YVU410 = 961893977,
    WL_SHM_FORMAT_YUV411 = 825316697,
    WL_SHM_FORMAT_YVU411 = 825316953,
    WL_SHM_FORMAT_YUV420 = 842093913,
    WL_SHM_FORMAT_YVU420 = 842094169,
    WL_SHM_FORMAT_YUV422 = 909202777,
    WL_SHM_FORMAT_YVU422 = 909203033,
    WL_SHM_FORMAT_YUV444 = 875713881,
    WL_SHM_FORMAT_YVU444 = 875714137,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_shm_listener {
    pub format: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, wl_shm: *mut wl_shm, format: u32),
    >,
}
#[test]
fn bindgen_test_layout_wl_shm_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_shm_listener>(),
        8usize,
        concat!("Size of: ", stringify!(wl_shm_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_shm_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_shm_listener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_shm_listener>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_shm_listener),
            "::",
            stringify!(format)
        )
    );
}
extern "C" {
    pub fn wl_shm_add_listener(
        wl_shm: *mut wl_shm,
        listener: *const wl_shm_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_shm_set_user_data(wl_shm: *mut wl_shm, user_data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wl_shm_get_user_data(wl_shm: *mut wl_shm) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_shm_get_version(wl_shm: *mut wl_shm) -> u32;
}
extern "C" {
    pub fn wl_shm_destroy(wl_shm: *mut wl_shm);
}
extern "C" {
    pub fn wl_shm_create_pool(wl_shm: *mut wl_shm, fd: i32, size: i32) -> *mut wl_shm_pool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_buffer_listener {
    pub release: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, wl_buffer: *mut wl_buffer),
    >,
}
#[test]
fn bindgen_test_layout_wl_buffer_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_buffer_listener>(),
        8usize,
        concat!("Size of: ", stringify!(wl_buffer_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_buffer_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_buffer_listener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_buffer_listener>())).release as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_buffer_listener),
            "::",
            stringify!(release)
        )
    );
}
extern "C" {
    pub fn wl_buffer_add_listener(
        wl_buffer: *mut wl_buffer,
        listener: *const wl_buffer_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_buffer_set_user_data(
        wl_buffer: *mut wl_buffer,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_buffer_get_user_data(wl_buffer: *mut wl_buffer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_buffer_get_version(wl_buffer: *mut wl_buffer) -> u32;
}
extern "C" {
    pub fn wl_buffer_destroy(wl_buffer: *mut wl_buffer);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_data_offer_error {
    WL_DATA_OFFER_ERROR_INVALID_FINISH = 0,
    WL_DATA_OFFER_ERROR_INVALID_ACTION_MASK = 1,
    WL_DATA_OFFER_ERROR_INVALID_ACTION = 2,
    WL_DATA_OFFER_ERROR_INVALID_OFFER = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_data_offer_listener {
    pub offer: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_offer: *mut wl_data_offer,
            mime_type: *const ::std::os::raw::c_char,
        ),
    >,
    pub source_actions: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_offer: *mut wl_data_offer,
            source_actions: u32,
        ),
    >,
    pub action: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_offer: *mut wl_data_offer,
            dnd_action: u32,
        ),
    >,
}
#[test]
fn bindgen_test_layout_wl_data_offer_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_data_offer_listener>(),
        24usize,
        concat!("Size of: ", stringify!(wl_data_offer_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_data_offer_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_data_offer_listener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_data_offer_listener>())).offer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_offer_listener),
            "::",
            stringify!(offer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wl_data_offer_listener>())).source_actions as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_offer_listener),
            "::",
            stringify!(source_actions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_data_offer_listener>())).action as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_offer_listener),
            "::",
            stringify!(action)
        )
    );
}
extern "C" {
    pub fn wl_data_offer_add_listener(
        wl_data_offer: *mut wl_data_offer,
        listener: *const wl_data_offer_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_data_offer_set_user_data(
        wl_data_offer: *mut wl_data_offer,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_data_offer_get_user_data(
        wl_data_offer: *mut wl_data_offer,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_data_offer_get_version(wl_data_offer: *mut wl_data_offer) -> u32;
}
extern "C" {
    pub fn wl_data_offer_accept(
        wl_data_offer: *mut wl_data_offer,
        serial: u32,
        mime_type: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wl_data_offer_receive(
        wl_data_offer: *mut wl_data_offer,
        mime_type: *const ::std::os::raw::c_char,
        fd: i32,
    );
}
extern "C" {
    pub fn wl_data_offer_destroy(wl_data_offer: *mut wl_data_offer);
}
extern "C" {
    pub fn wl_data_offer_finish(wl_data_offer: *mut wl_data_offer);
}
extern "C" {
    pub fn wl_data_offer_set_actions(
        wl_data_offer: *mut wl_data_offer,
        dnd_actions: u32,
        preferred_action: u32,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_data_source_error {
    WL_DATA_SOURCE_ERROR_INVALID_ACTION_MASK = 0,
    WL_DATA_SOURCE_ERROR_INVALID_SOURCE = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_data_source_listener {
    pub target: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_source: *mut wl_data_source,
            mime_type: *const ::std::os::raw::c_char,
        ),
    >,
    pub send: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_source: *mut wl_data_source,
            mime_type: *const ::std::os::raw::c_char,
            fd: i32,
        ),
    >,
    pub cancelled: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_source: *mut wl_data_source,
        ),
    >,
    pub dnd_drop_performed: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_source: *mut wl_data_source,
        ),
    >,
    pub dnd_finished: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_source: *mut wl_data_source,
        ),
    >,
    pub action: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_source: *mut wl_data_source,
            dnd_action: u32,
        ),
    >,
}
#[test]
fn bindgen_test_layout_wl_data_source_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_data_source_listener>(),
        48usize,
        concat!("Size of: ", stringify!(wl_data_source_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_data_source_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_data_source_listener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_data_source_listener>())).target as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_source_listener),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_data_source_listener>())).send as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_source_listener),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wl_data_source_listener>())).cancelled as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_source_listener),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wl_data_source_listener>())).dnd_drop_performed as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_source_listener),
            "::",
            stringify!(dnd_drop_performed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wl_data_source_listener>())).dnd_finished as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_source_listener),
            "::",
            stringify!(dnd_finished)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_data_source_listener>())).action as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_source_listener),
            "::",
            stringify!(action)
        )
    );
}
extern "C" {
    pub fn wl_data_source_add_listener(
        wl_data_source: *mut wl_data_source,
        listener: *const wl_data_source_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_data_source_set_user_data(
        wl_data_source: *mut wl_data_source,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_data_source_get_user_data(
        wl_data_source: *mut wl_data_source,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_data_source_get_version(wl_data_source: *mut wl_data_source) -> u32;
}
extern "C" {
    pub fn wl_data_source_offer(
        wl_data_source: *mut wl_data_source,
        mime_type: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wl_data_source_destroy(wl_data_source: *mut wl_data_source);
}
extern "C" {
    pub fn wl_data_source_set_actions(wl_data_source: *mut wl_data_source, dnd_actions: u32);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_data_device_error {
    WL_DATA_DEVICE_ERROR_ROLE = 0,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_data_device_listener {
    pub data_offer: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_device: *mut wl_data_device,
            id: *mut wl_data_offer,
        ),
    >,
    pub enter: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_device: *mut wl_data_device,
            serial: u32,
            surface: *mut wl_surface,
            x: wl_fixed_t,
            y: wl_fixed_t,
            id: *mut wl_data_offer,
        ),
    >,
    pub leave: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_device: *mut wl_data_device,
        ),
    >,
    pub motion: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_device: *mut wl_data_device,
            time: u32,
            x: wl_fixed_t,
            y: wl_fixed_t,
        ),
    >,
    pub drop: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_device: *mut wl_data_device,
        ),
    >,
    pub selection: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_data_device: *mut wl_data_device,
            id: *mut wl_data_offer,
        ),
    >,
}
#[test]
fn bindgen_test_layout_wl_data_device_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_data_device_listener>(),
        48usize,
        concat!("Size of: ", stringify!(wl_data_device_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_data_device_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_data_device_listener))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wl_data_device_listener>())).data_offer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_device_listener),
            "::",
            stringify!(data_offer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_data_device_listener>())).enter as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_device_listener),
            "::",
            stringify!(enter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_data_device_listener>())).leave as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_device_listener),
            "::",
            stringify!(leave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_data_device_listener>())).motion as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_device_listener),
            "::",
            stringify!(motion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_data_device_listener>())).drop as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_device_listener),
            "::",
            stringify!(drop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wl_data_device_listener>())).selection as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_data_device_listener),
            "::",
            stringify!(selection)
        )
    );
}
extern "C" {
    pub fn wl_data_device_add_listener(
        wl_data_device: *mut wl_data_device,
        listener: *const wl_data_device_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_data_device_set_user_data(
        wl_data_device: *mut wl_data_device,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_data_device_get_user_data(
        wl_data_device: *mut wl_data_device,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_data_device_get_version(wl_data_device: *mut wl_data_device) -> u32;
}
extern "C" {
    pub fn wl_data_device_destroy(wl_data_device: *mut wl_data_device);
}
extern "C" {
    pub fn wl_data_device_start_drag(
        wl_data_device: *mut wl_data_device,
        source: *mut wl_data_source,
        origin: *mut wl_surface,
        icon: *mut wl_surface,
        serial: u32,
    );
}
extern "C" {
    pub fn wl_data_device_set_selection(
        wl_data_device: *mut wl_data_device,
        source: *mut wl_data_source,
        serial: u32,
    );
}
extern "C" {
    pub fn wl_data_device_release(wl_data_device: *mut wl_data_device);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_data_device_manager_dnd_action {
    WL_DATA_DEVICE_MANAGER_DND_ACTION_NONE = 0,
    WL_DATA_DEVICE_MANAGER_DND_ACTION_COPY = 1,
    WL_DATA_DEVICE_MANAGER_DND_ACTION_MOVE = 2,
    WL_DATA_DEVICE_MANAGER_DND_ACTION_ASK = 4,
}
extern "C" {
    pub fn wl_data_device_manager_set_user_data(
        wl_data_device_manager: *mut wl_data_device_manager,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_data_device_manager_get_user_data(
        wl_data_device_manager: *mut wl_data_device_manager,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_data_device_manager_get_version(
        wl_data_device_manager: *mut wl_data_device_manager,
    ) -> u32;
}
extern "C" {
    pub fn wl_data_device_manager_destroy(wl_data_device_manager: *mut wl_data_device_manager);
}
extern "C" {
    pub fn wl_data_device_manager_create_data_source(
        wl_data_device_manager: *mut wl_data_device_manager,
    ) -> *mut wl_data_source;
}
extern "C" {
    pub fn wl_data_device_manager_get_data_device(
        wl_data_device_manager: *mut wl_data_device_manager,
        seat: *mut wl_seat,
    ) -> *mut wl_data_device;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_shell_error {
    WL_SHELL_ERROR_ROLE = 0,
}
extern "C" {
    pub fn wl_shell_set_user_data(wl_shell: *mut wl_shell, user_data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wl_shell_get_user_data(wl_shell: *mut wl_shell) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_shell_get_version(wl_shell: *mut wl_shell) -> u32;
}
extern "C" {
    pub fn wl_shell_destroy(wl_shell: *mut wl_shell);
}
extern "C" {
    pub fn wl_shell_get_shell_surface(
        wl_shell: *mut wl_shell,
        surface: *mut wl_surface,
    ) -> *mut wl_shell_surface;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_shell_surface_resize {
    WL_SHELL_SURFACE_RESIZE_NONE = 0,
    WL_SHELL_SURFACE_RESIZE_TOP = 1,
    WL_SHELL_SURFACE_RESIZE_BOTTOM = 2,
    WL_SHELL_SURFACE_RESIZE_LEFT = 4,
    WL_SHELL_SURFACE_RESIZE_TOP_LEFT = 5,
    WL_SHELL_SURFACE_RESIZE_BOTTOM_LEFT = 6,
    WL_SHELL_SURFACE_RESIZE_RIGHT = 8,
    WL_SHELL_SURFACE_RESIZE_TOP_RIGHT = 9,
    WL_SHELL_SURFACE_RESIZE_BOTTOM_RIGHT = 10,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_shell_surface_transient {
    WL_SHELL_SURFACE_TRANSIENT_INACTIVE = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_shell_surface_fullscreen_method {
    WL_SHELL_SURFACE_FULLSCREEN_METHOD_DEFAULT = 0,
    WL_SHELL_SURFACE_FULLSCREEN_METHOD_SCALE = 1,
    WL_SHELL_SURFACE_FULLSCREEN_METHOD_DRIVER = 2,
    WL_SHELL_SURFACE_FULLSCREEN_METHOD_FILL = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_shell_surface_listener {
    pub ping: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_shell_surface: *mut wl_shell_surface,
            serial: u32,
        ),
    >,
    pub configure: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_shell_surface: *mut wl_shell_surface,
            edges: u32,
            width: i32,
            height: i32,
        ),
    >,
    pub popup_done: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_shell_surface: *mut wl_shell_surface,
        ),
    >,
}
#[test]
fn bindgen_test_layout_wl_shell_surface_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_shell_surface_listener>(),
        24usize,
        concat!("Size of: ", stringify!(wl_shell_surface_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_shell_surface_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_shell_surface_listener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_shell_surface_listener>())).ping as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_shell_surface_listener),
            "::",
            stringify!(ping)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wl_shell_surface_listener>())).configure as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_shell_surface_listener),
            "::",
            stringify!(configure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wl_shell_surface_listener>())).popup_done as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_shell_surface_listener),
            "::",
            stringify!(popup_done)
        )
    );
}
extern "C" {
    pub fn wl_shell_surface_add_listener(
        wl_shell_surface: *mut wl_shell_surface,
        listener: *const wl_shell_surface_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_shell_surface_set_user_data(
        wl_shell_surface: *mut wl_shell_surface,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_shell_surface_get_user_data(
        wl_shell_surface: *mut wl_shell_surface,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_shell_surface_get_version(wl_shell_surface: *mut wl_shell_surface) -> u32;
}
extern "C" {
    pub fn wl_shell_surface_destroy(wl_shell_surface: *mut wl_shell_surface);
}
extern "C" {
    pub fn wl_shell_surface_pong(wl_shell_surface: *mut wl_shell_surface, serial: u32);
}
extern "C" {
    pub fn wl_shell_surface_move(
        wl_shell_surface: *mut wl_shell_surface,
        seat: *mut wl_seat,
        serial: u32,
    );
}
extern "C" {
    pub fn wl_shell_surface_resize(
        wl_shell_surface: *mut wl_shell_surface,
        seat: *mut wl_seat,
        serial: u32,
        edges: u32,
    );
}
extern "C" {
    pub fn wl_shell_surface_set_toplevel(wl_shell_surface: *mut wl_shell_surface);
}
extern "C" {
    pub fn wl_shell_surface_set_transient(
        wl_shell_surface: *mut wl_shell_surface,
        parent: *mut wl_surface,
        x: i32,
        y: i32,
        flags: u32,
    );
}
extern "C" {
    pub fn wl_shell_surface_set_fullscreen(
        wl_shell_surface: *mut wl_shell_surface,
        method: u32,
        framerate: u32,
        output: *mut wl_output,
    );
}
extern "C" {
    pub fn wl_shell_surface_set_popup(
        wl_shell_surface: *mut wl_shell_surface,
        seat: *mut wl_seat,
        serial: u32,
        parent: *mut wl_surface,
        x: i32,
        y: i32,
        flags: u32,
    );
}
extern "C" {
    pub fn wl_shell_surface_set_maximized(
        wl_shell_surface: *mut wl_shell_surface,
        output: *mut wl_output,
    );
}
extern "C" {
    pub fn wl_shell_surface_set_title(
        wl_shell_surface: *mut wl_shell_surface,
        title: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wl_shell_surface_set_class(
        wl_shell_surface: *mut wl_shell_surface,
        class_: *const ::std::os::raw::c_char,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_surface_error {
    WL_SURFACE_ERROR_INVALID_SCALE = 0,
    WL_SURFACE_ERROR_INVALID_TRANSFORM = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_surface_listener {
    pub enter: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_surface: *mut wl_surface,
            output: *mut wl_output,
        ),
    >,
    pub leave: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_surface: *mut wl_surface,
            output: *mut wl_output,
        ),
    >,
}
#[test]
fn bindgen_test_layout_wl_surface_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_surface_listener>(),
        16usize,
        concat!("Size of: ", stringify!(wl_surface_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_surface_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_surface_listener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_surface_listener>())).enter as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_surface_listener),
            "::",
            stringify!(enter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_surface_listener>())).leave as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_surface_listener),
            "::",
            stringify!(leave)
        )
    );
}
extern "C" {
    pub fn wl_surface_add_listener(
        wl_surface: *mut wl_surface,
        listener: *const wl_surface_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_surface_set_user_data(
        wl_surface: *mut wl_surface,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_surface_get_user_data(wl_surface: *mut wl_surface) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_surface_get_version(wl_surface: *mut wl_surface) -> u32;
}
extern "C" {
    pub fn wl_surface_destroy(wl_surface: *mut wl_surface);
}
extern "C" {
    pub fn wl_surface_attach(wl_surface: *mut wl_surface, buffer: *mut wl_buffer, x: i32, y: i32);
}
extern "C" {
    pub fn wl_surface_damage(wl_surface: *mut wl_surface, x: i32, y: i32, width: i32, height: i32);
}
extern "C" {
    pub fn wl_surface_frame(wl_surface: *mut wl_surface) -> *mut wl_callback;
}
extern "C" {
    pub fn wl_surface_set_opaque_region(wl_surface: *mut wl_surface, region: *mut wl_region);
}
extern "C" {
    pub fn wl_surface_set_input_region(wl_surface: *mut wl_surface, region: *mut wl_region);
}
extern "C" {
    pub fn wl_surface_commit(wl_surface: *mut wl_surface);
}
extern "C" {
    pub fn wl_surface_set_buffer_transform(wl_surface: *mut wl_surface, transform: i32);
}
extern "C" {
    pub fn wl_surface_set_buffer_scale(wl_surface: *mut wl_surface, scale: i32);
}
extern "C" {
    pub fn wl_surface_damage_buffer(
        wl_surface: *mut wl_surface,
        x: i32,
        y: i32,
        width: i32,
        height: i32,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_seat_capability {
    WL_SEAT_CAPABILITY_POINTER = 1,
    WL_SEAT_CAPABILITY_KEYBOARD = 2,
    WL_SEAT_CAPABILITY_TOUCH = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_seat_listener {
    pub capabilities: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_seat: *mut wl_seat,
            capabilities: u32,
        ),
    >,
    pub name: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_seat: *mut wl_seat,
            name: *const ::std::os::raw::c_char,
        ),
    >,
}
#[test]
fn bindgen_test_layout_wl_seat_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_seat_listener>(),
        16usize,
        concat!("Size of: ", stringify!(wl_seat_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_seat_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_seat_listener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_seat_listener>())).capabilities as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_seat_listener),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_seat_listener>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_seat_listener),
            "::",
            stringify!(name)
        )
    );
}
extern "C" {
    pub fn wl_seat_add_listener(
        wl_seat: *mut wl_seat,
        listener: *const wl_seat_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_seat_set_user_data(wl_seat: *mut wl_seat, user_data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wl_seat_get_user_data(wl_seat: *mut wl_seat) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_seat_get_version(wl_seat: *mut wl_seat) -> u32;
}
extern "C" {
    pub fn wl_seat_destroy(wl_seat: *mut wl_seat);
}
extern "C" {
    pub fn wl_seat_get_pointer(wl_seat: *mut wl_seat) -> *mut wl_pointer;
}
extern "C" {
    pub fn wl_seat_get_keyboard(wl_seat: *mut wl_seat) -> *mut wl_keyboard;
}
extern "C" {
    pub fn wl_seat_get_touch(wl_seat: *mut wl_seat) -> *mut wl_touch;
}
extern "C" {
    pub fn wl_seat_release(wl_seat: *mut wl_seat);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_pointer_error {
    WL_POINTER_ERROR_ROLE = 0,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_pointer_button_state {
    WL_POINTER_BUTTON_STATE_RELEASED = 0,
    WL_POINTER_BUTTON_STATE_PRESSED = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_pointer_axis {
    WL_POINTER_AXIS_VERTICAL_SCROLL = 0,
    WL_POINTER_AXIS_HORIZONTAL_SCROLL = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_pointer_axis_source {
    WL_POINTER_AXIS_SOURCE_WHEEL = 0,
    WL_POINTER_AXIS_SOURCE_FINGER = 1,
    WL_POINTER_AXIS_SOURCE_CONTINUOUS = 2,
    WL_POINTER_AXIS_SOURCE_WHEEL_TILT = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_pointer_listener {
    pub enter: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_pointer: *mut wl_pointer,
            serial: u32,
            surface: *mut wl_surface,
            surface_x: wl_fixed_t,
            surface_y: wl_fixed_t,
        ),
    >,
    pub leave: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_pointer: *mut wl_pointer,
            serial: u32,
            surface: *mut wl_surface,
        ),
    >,
    pub motion: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_pointer: *mut wl_pointer,
            time: u32,
            surface_x: wl_fixed_t,
            surface_y: wl_fixed_t,
        ),
    >,
    pub button: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_pointer: *mut wl_pointer,
            serial: u32,
            time: u32,
            button: u32,
            state: u32,
        ),
    >,
    pub axis: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_pointer: *mut wl_pointer,
            time: u32,
            axis: u32,
            value: wl_fixed_t,
        ),
    >,
    pub frame: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, wl_pointer: *mut wl_pointer),
    >,
    pub axis_source: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_pointer: *mut wl_pointer,
            axis_source: u32,
        ),
    >,
    pub axis_stop: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_pointer: *mut wl_pointer,
            time: u32,
            axis: u32,
        ),
    >,
    pub axis_discrete: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_pointer: *mut wl_pointer,
            axis: u32,
            discrete: i32,
        ),
    >,
}
#[test]
fn bindgen_test_layout_wl_pointer_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_pointer_listener>(),
        72usize,
        concat!("Size of: ", stringify!(wl_pointer_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_pointer_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_pointer_listener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_pointer_listener>())).enter as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_pointer_listener),
            "::",
            stringify!(enter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_pointer_listener>())).leave as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_pointer_listener),
            "::",
            stringify!(leave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_pointer_listener>())).motion as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_pointer_listener),
            "::",
            stringify!(motion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_pointer_listener>())).button as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_pointer_listener),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_pointer_listener>())).axis as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_pointer_listener),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_pointer_listener>())).frame as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_pointer_listener),
            "::",
            stringify!(frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_pointer_listener>())).axis_source as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_pointer_listener),
            "::",
            stringify!(axis_source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_pointer_listener>())).axis_stop as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_pointer_listener),
            "::",
            stringify!(axis_stop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wl_pointer_listener>())).axis_discrete as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_pointer_listener),
            "::",
            stringify!(axis_discrete)
        )
    );
}
extern "C" {
    pub fn wl_pointer_add_listener(
        wl_pointer: *mut wl_pointer,
        listener: *const wl_pointer_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_pointer_set_user_data(
        wl_pointer: *mut wl_pointer,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_pointer_get_user_data(wl_pointer: *mut wl_pointer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_pointer_get_version(wl_pointer: *mut wl_pointer) -> u32;
}
extern "C" {
    pub fn wl_pointer_destroy(wl_pointer: *mut wl_pointer);
}
extern "C" {
    pub fn wl_pointer_set_cursor(
        wl_pointer: *mut wl_pointer,
        serial: u32,
        surface: *mut wl_surface,
        hotspot_x: i32,
        hotspot_y: i32,
    );
}
extern "C" {
    pub fn wl_pointer_release(wl_pointer: *mut wl_pointer);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_keyboard_keymap_format {
    WL_KEYBOARD_KEYMAP_FORMAT_NO_KEYMAP = 0,
    WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1 = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_keyboard_key_state {
    WL_KEYBOARD_KEY_STATE_RELEASED = 0,
    WL_KEYBOARD_KEY_STATE_PRESSED = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_keyboard_listener {
    pub keymap: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_keyboard: *mut wl_keyboard,
            format: u32,
            fd: i32,
            size: u32,
        ),
    >,
    pub enter: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_keyboard: *mut wl_keyboard,
            serial: u32,
            surface: *mut wl_surface,
            keys: *mut wl_array,
        ),
    >,
    pub leave: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_keyboard: *mut wl_keyboard,
            serial: u32,
            surface: *mut wl_surface,
        ),
    >,
    pub key: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_keyboard: *mut wl_keyboard,
            serial: u32,
            time: u32,
            key: u32,
            state: u32,
        ),
    >,
    pub modifiers: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_keyboard: *mut wl_keyboard,
            serial: u32,
            mods_depressed: u32,
            mods_latched: u32,
            mods_locked: u32,
            group: u32,
        ),
    >,
    pub repeat_info: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_keyboard: *mut wl_keyboard,
            rate: i32,
            delay: i32,
        ),
    >,
}
#[test]
fn bindgen_test_layout_wl_keyboard_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_keyboard_listener>(),
        48usize,
        concat!("Size of: ", stringify!(wl_keyboard_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_keyboard_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_keyboard_listener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_keyboard_listener>())).keymap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_keyboard_listener),
            "::",
            stringify!(keymap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_keyboard_listener>())).enter as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_keyboard_listener),
            "::",
            stringify!(enter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_keyboard_listener>())).leave as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_keyboard_listener),
            "::",
            stringify!(leave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_keyboard_listener>())).key as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_keyboard_listener),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_keyboard_listener>())).modifiers as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_keyboard_listener),
            "::",
            stringify!(modifiers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wl_keyboard_listener>())).repeat_info as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_keyboard_listener),
            "::",
            stringify!(repeat_info)
        )
    );
}
extern "C" {
    pub fn wl_keyboard_add_listener(
        wl_keyboard: *mut wl_keyboard,
        listener: *const wl_keyboard_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_keyboard_set_user_data(
        wl_keyboard: *mut wl_keyboard,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_keyboard_get_user_data(wl_keyboard: *mut wl_keyboard) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_keyboard_get_version(wl_keyboard: *mut wl_keyboard) -> u32;
}
extern "C" {
    pub fn wl_keyboard_destroy(wl_keyboard: *mut wl_keyboard);
}
extern "C" {
    pub fn wl_keyboard_release(wl_keyboard: *mut wl_keyboard);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_touch_listener {
    pub down: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_touch: *mut wl_touch,
            serial: u32,
            time: u32,
            surface: *mut wl_surface,
            id: i32,
            x: wl_fixed_t,
            y: wl_fixed_t,
        ),
    >,
    pub up: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_touch: *mut wl_touch,
            serial: u32,
            time: u32,
            id: i32,
        ),
    >,
    pub motion: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_touch: *mut wl_touch,
            time: u32,
            id: i32,
            x: wl_fixed_t,
            y: wl_fixed_t,
        ),
    >,
    pub frame: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, wl_touch: *mut wl_touch),
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, wl_touch: *mut wl_touch),
    >,
    pub shape: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_touch: *mut wl_touch,
            id: i32,
            major: wl_fixed_t,
            minor: wl_fixed_t,
        ),
    >,
    pub orientation: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_touch: *mut wl_touch,
            id: i32,
            orientation: wl_fixed_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout_wl_touch_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_touch_listener>(),
        56usize,
        concat!("Size of: ", stringify!(wl_touch_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_touch_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_touch_listener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_touch_listener>())).down as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_touch_listener),
            "::",
            stringify!(down)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_touch_listener>())).up as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_touch_listener),
            "::",
            stringify!(up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_touch_listener>())).motion as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_touch_listener),
            "::",
            stringify!(motion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_touch_listener>())).frame as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_touch_listener),
            "::",
            stringify!(frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_touch_listener>())).cancel as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_touch_listener),
            "::",
            stringify!(cancel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_touch_listener>())).shape as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_touch_listener),
            "::",
            stringify!(shape)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_touch_listener>())).orientation as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_touch_listener),
            "::",
            stringify!(orientation)
        )
    );
}
extern "C" {
    pub fn wl_touch_add_listener(
        wl_touch: *mut wl_touch,
        listener: *const wl_touch_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_touch_set_user_data(wl_touch: *mut wl_touch, user_data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wl_touch_get_user_data(wl_touch: *mut wl_touch) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_touch_get_version(wl_touch: *mut wl_touch) -> u32;
}
extern "C" {
    pub fn wl_touch_destroy(wl_touch: *mut wl_touch);
}
extern "C" {
    pub fn wl_touch_release(wl_touch: *mut wl_touch);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_output_subpixel {
    WL_OUTPUT_SUBPIXEL_UNKNOWN = 0,
    WL_OUTPUT_SUBPIXEL_NONE = 1,
    WL_OUTPUT_SUBPIXEL_HORIZONTAL_RGB = 2,
    WL_OUTPUT_SUBPIXEL_HORIZONTAL_BGR = 3,
    WL_OUTPUT_SUBPIXEL_VERTICAL_RGB = 4,
    WL_OUTPUT_SUBPIXEL_VERTICAL_BGR = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_output_transform {
    WL_OUTPUT_TRANSFORM_NORMAL = 0,
    WL_OUTPUT_TRANSFORM_90 = 1,
    WL_OUTPUT_TRANSFORM_180 = 2,
    WL_OUTPUT_TRANSFORM_270 = 3,
    WL_OUTPUT_TRANSFORM_FLIPPED = 4,
    WL_OUTPUT_TRANSFORM_FLIPPED_90 = 5,
    WL_OUTPUT_TRANSFORM_FLIPPED_180 = 6,
    WL_OUTPUT_TRANSFORM_FLIPPED_270 = 7,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_output_mode {
    WL_OUTPUT_MODE_CURRENT = 1,
    WL_OUTPUT_MODE_PREFERRED = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_output_listener {
    pub geometry: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_output: *mut wl_output,
            x: i32,
            y: i32,
            physical_width: i32,
            physical_height: i32,
            subpixel: i32,
            make: *const ::std::os::raw::c_char,
            model: *const ::std::os::raw::c_char,
            transform: i32,
        ),
    >,
    pub mode: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_output: *mut wl_output,
            flags: u32,
            width: i32,
            height: i32,
            refresh: i32,
        ),
    >,
    pub done: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, wl_output: *mut wl_output),
    >,
    pub scale: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            wl_output: *mut wl_output,
            factor: i32,
        ),
    >,
}
#[test]
fn bindgen_test_layout_wl_output_listener() {
    assert_eq!(
        ::std::mem::size_of::<wl_output_listener>(),
        32usize,
        concat!("Size of: ", stringify!(wl_output_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<wl_output_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(wl_output_listener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_output_listener>())).geometry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_output_listener),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_output_listener>())).mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_output_listener),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_output_listener>())).done as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_output_listener),
            "::",
            stringify!(done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wl_output_listener>())).scale as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wl_output_listener),
            "::",
            stringify!(scale)
        )
    );
}
extern "C" {
    pub fn wl_output_add_listener(
        wl_output: *mut wl_output,
        listener: *const wl_output_listener,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wl_output_set_user_data(
        wl_output: *mut wl_output,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_output_get_user_data(wl_output: *mut wl_output) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_output_get_version(wl_output: *mut wl_output) -> u32;
}
extern "C" {
    pub fn wl_output_destroy(wl_output: *mut wl_output);
}
extern "C" {
    pub fn wl_output_release(wl_output: *mut wl_output);
}
extern "C" {
    pub fn wl_region_set_user_data(
        wl_region: *mut wl_region,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_region_get_user_data(wl_region: *mut wl_region) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_region_get_version(wl_region: *mut wl_region) -> u32;
}
extern "C" {
    pub fn wl_region_destroy(wl_region: *mut wl_region);
}
extern "C" {
    pub fn wl_region_add(wl_region: *mut wl_region, x: i32, y: i32, width: i32, height: i32);
}
extern "C" {
    pub fn wl_region_subtract(wl_region: *mut wl_region, x: i32, y: i32, width: i32, height: i32);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_subcompositor_error {
    WL_SUBCOMPOSITOR_ERROR_BAD_SURFACE = 0,
}
extern "C" {
    pub fn wl_subcompositor_set_user_data(
        wl_subcompositor: *mut wl_subcompositor,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_subcompositor_get_user_data(
        wl_subcompositor: *mut wl_subcompositor,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_subcompositor_get_version(wl_subcompositor: *mut wl_subcompositor) -> u32;
}
extern "C" {
    pub fn wl_subcompositor_destroy(wl_subcompositor: *mut wl_subcompositor);
}
extern "C" {
    pub fn wl_subcompositor_get_subsurface(
        wl_subcompositor: *mut wl_subcompositor,
        surface: *mut wl_surface,
        parent: *mut wl_surface,
    ) -> *mut wl_subsurface;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wl_subsurface_error {
    WL_SUBSURFACE_ERROR_BAD_SURFACE = 0,
}
extern "C" {
    pub fn wl_subsurface_set_user_data(
        wl_subsurface: *mut wl_subsurface,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wl_subsurface_get_user_data(
        wl_subsurface: *mut wl_subsurface,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wl_subsurface_get_version(wl_subsurface: *mut wl_subsurface) -> u32;
}
extern "C" {
    pub fn wl_subsurface_destroy(wl_subsurface: *mut wl_subsurface);
}
extern "C" {
    pub fn wl_subsurface_set_position(wl_subsurface: *mut wl_subsurface, x: i32, y: i32);
}
extern "C" {
    pub fn wl_subsurface_place_above(wl_subsurface: *mut wl_subsurface, sibling: *mut wl_surface);
}
extern "C" {
    pub fn wl_subsurface_place_below(wl_subsurface: *mut wl_subsurface, sibling: *mut wl_surface);
}
extern "C" {
    pub fn wl_subsurface_set_sync(wl_subsurface: *mut wl_subsurface);
}
extern "C" {
    pub fn wl_subsurface_set_desync(wl_subsurface: *mut wl_subsurface);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
